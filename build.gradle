import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
	jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
        
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'eclipse'

version = '5.0.0'
group= "src.train" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Traincraft"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    version = "1.12.2-14.23.5.2768"
    mappings = "stable_39";
    
    runDir = "run"
    //replaceIn "Info.java"
    //replace "@VERSION1@", config.modVersion.toString()
}


repositories {
    maven {
        name "ChickenBones"
        url "http://chickenbones.net/maven/"
    }
    maven { url = "https://jitpack.io" }
    maven { 
        url = "http://maven.cil.li/"
    }
}



dependencies {
	//minecraft "net.minecraftforge:forge:1.12.2-14.23.5.2768"

    //repositories {
    //    ivy {
    //        name "BuildCraft"
    //        artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
    //    }
    //}

    //compile "li.cil.oc:OpenComputers:MC1.7.10-1.5.+:api"

    //compile name: "buildcraft", version: "7.1.16", classifier: "dev"
	//move to JEI, or support both?
    //compile "codechicken:CodeChickenLib:1.7.10-1.1.3.138:dev"
    //compile "codechicken:CodeChickenCore:1.7.10-1.0.7.46:dev"
    //compile "codechicken:NotEnoughItems:1.7.10-1.0.5.110:dev"


    compile fileTree(dir: 'libs', include: ['*.jar'])
}


processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // quality of life line to simplify importing jars for experimental testing
    compile fileTree(dir: 'libs', include: ['*.jar'])
}


// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "examplemod",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

idea
{
	module
	{
		inheritOutputDirs = true
	}
}
